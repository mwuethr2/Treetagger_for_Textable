"""
<name>Treetagger</name>
<description>creation de Treetagger widget</description>
<icon>path_to_icon.svg</icon>
<priority>11</priority> 
"""

# Standard imports...
import Orange
from OWWidget import *
import OWGUI
from _textable.widgets.LTTL.Segmenter import Segmenter
from _textable.widgets.LTTL.Segmentation import Segmentation
import ctypes
import os

from _textable.widgets.TextableUtils import *   # Provides several utilities.

class OWTreetagger(OWWidget):
    
    # Widget settings declaration...
    settingsList = [
        'lien_ttgg',
        'options_ttgg'
        'langue'
        'word_label'
        ]   

    
    def __init__(self, parent=None, signalManager=None):
        
        #Widget creator
        OWWidget.__init__(self, parent, signalManager, wantMainArea=0)
        
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        # Channel definitions...
        self.inputs = [('TextInput', Segmentation, self.processInputData), Single]     
        self.outputs = [('TextInput', Segmentation)]

        self.autoSend = True        
        self.options_ttgg = False
        self.langue = "francais"
        self.word_label = ""
        self.displayAdvancedSettings = False        
        self.label = u'tagged_data'
            
        # Always end Textable widget settings with the following 3 lines...
        self.uuid = None
        self.lien_ttgg = None
        self.loadSettings()
        self.uuid = getWidgetUuid(self)
        #provisoire:
        self.lien_ttgg = None
        
        # Settings and other attribute initializations...
        self.TextInput = "salut"



            
        # Other attributes...
        self.inputData = None   
        self.segmenter = Segmenter()
        
        
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------        
        
        # Next two instructions are helpers from TextableUtils. Corresponding
        # interface elements are declared here and actually drawn below (at
        # their position in the UI)...
        self.infoBox = InfoBox(widget=self.controlArea)
        self.sendButton = SendButton(
            widget=self.controlArea,
            master=self,
            callback=self.sendData,
            infoBoxAttribute=u'infoBox',
            sendIfPreCallback=self.updateGUI,
        )

        # The AdvancedSettings class, also from TextableUtils, facilitates
        # the management of basic vs. advanced interface. An object from this 
        # class (here assigned to self.advancedSettings) contains two lists 
        # (basicWidgets and advanceWidgets), to which the corresponding
        # widgetBoxes must be added.
        self.advancedSettings = AdvancedSettings(
            widget=self.controlArea,
            master=self,
            callback=self.advence,
        )

        # User interface...

        # Advanced settings checkbox (basic/advanced interface will appear 
        # immediately after it...
        self.advancedSettings.draw()

        self.advancedSettings.advancedWidgetsAppendSeparator()
        
        #bouton pour trouver lien ttgg
        self.infoBox3 = OWGUI.widgetBox(
            self.controlArea, 
            u"")
            
        OWGUI.button(
            widget=self.infoBox3,
            master=self,
            label='lien vers treetagger',
            callback = self.browse,
        )
        

        # infoBox1
        self.infoBox1 = OWGUI.widgetBox(
            self.controlArea, 
            u"Language ", 
            addSpace=True)
            
        self.langue = OWGUI.comboBox(
            widget = self.infoBox1,
            master = self, 
            value='langue', 
            items= ["francais", "anglais"],
            )
        
        
        # infoBox2 donne des info sur input et output
        infoBox2 = OWGUI.widgetBox(self.controlArea, u"Temporaire ")
        
        self.infoLine = OWGUI.widgetLabel( 
            widget = infoBox2,              
            label='No input.',
        )    
        
        


        OWGUI.separator(widget=self.controlArea, height=3)

        # From TextableUtils: a minimal Options box (only segmentation label).
        basicOptionsBox = BasicOptionsBox(self.controlArea, self)
 
        OWGUI.separator(widget=self.controlArea, height=3)

        # Now Info box and Send button must be drawn...
        self.infoBox.draw()
        self.sendButton.draw()
        
        # Send data if autoSend.
        #self.sendButton.sendIf()
        
        # aller chercher le lien TreeTagger si pas deja la
        if self.lien_ttgg is None:
            self.browse()
        else:
            self.cacher_bouton(True)
            
        

#----------------------------------------------------------------------------------------------------------------------------------------------------------------------
       
#Annotations bloc repris du cours progtextI

    # def annotations(self):

    #     sampled_seg,discarded_seg = segmenter.sample(input_seg, 10)
    #     return sampled_seg.to_string()



    #     filtered_seg, _ = segmenter.select(
    #         input_seg,
    #         re.compile(r'voyelle'),
    #         annotation_key="type",
    #     )
    #     return filtered_seg.to_string()

    #     merged_seg = segmenter.concatenate([sampled_seg, filtered_seg])

    #     return merged.seg.to_string()



    #     for segment in Segmentation:
    #         print segment.annotations ['type']

    #     print [s.annotations['type'] for s in Segementation]
    #     print set ([s.annotations['type']for s in Segementation])

    #     return TextInput.get_annotation_keys()# definitions
    
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    # definitions

    def browse(self):
        self.lien_ttgg = unicode(
            QFileDialog.getExistingDirectory(self, u'Entrer lien Treetagger')
            )
       
        if self.lien_ttgg == "":
                ctypes.windll.user32.MessageBoxA(0, "Votre lien est vide, veuillez recommencer !\n\nREMARQUE :\n\nle chemin pour retrouver Treetagger doit contenir 5 fichier:\n- 'bin',\n- 'cmd',\n- 'INSTALL.txt',\n- 'INSTALL.txt~',\n- 'lib',\n- 'README.txt' ", "Erreur", 0) # http://stackoverflow.com/questions/2963263/how-can-i-create-a-simple-message-box-in-python
                self.cacher_bouton(False)
        else:
            # va dans l'adresse rentre par l'utilisateur
            os.chdir(self.lien_ttgg)

            # la liste dans son dossier
            ttgg_list_verification = os.listdir('.')

            # la liste qu'il devrait avoir
            ttgg_list_folder = ['bin', 'cmd', 'INSTALL.txt', 'INSTALL.txt~', 'lib', 'README.txt']

            # je verifier qu'elle soit identique sauf le dernier
            compteur = 0
            for i in range (len(ttgg_list_folder)):
            
                if ttgg_list_folder[i] in ttgg_list_verification:
                    compteur+=1
                    
            if compteur == len(ttgg_list_folder):
                
                #remettre compteur a 0 si modifie le lien !
                compteur = 0
                
                # ok le lien est correcte
                self.saveSettings()
                self.cacher_bouton(True)
                return
                
            else:
                #donne info sur le lien
                ctypes.windll.user32.MessageBoxA(0, "Votre lien est incorecte, veuillez recommencer !\n\nREMARQUE :\n\nle chemin pour retrouver Treetagger doit contenir 5 fichier:\n- 'bin',\n- 'cmd',\n- 'INSTALL.txt',\n- 'INSTALL.txt~',\n- 'lib',\n- 'README.txt' ", "Erreur", 0) # http://stackoverflow.com/questions/2963263/how-can-i-create-a-simple-message-box-in-python
                self.cacher_bouton(False)
            
            
       
    #recoit l'input
    def processInputData(self, inputData):

        # ici on prend le input 
        self.inputData = inputData
        
        # Send data to output.
        self.sendData()
        
    def sendData(self):
        self.inputs = list()
        segmenter = Segmenter()
        # Important: if input data is None, propagate this value to output...
        if len(self.inputData) == 0:
            self.infoLine.setText('No input.')
            self.send('Text data', None)
        else:
            self.infoLine.setText(self.inputData.to_string())
            for segment in self.inputData:

                # On appel la fonction tag
                tagged_text = self.tag(segment.get_content())
                # On definit des variables temporaies


                # On remplis la chaine temporaire (temp_string) des valeurs contenue dans la liste de liste self.inputData_tag
                for element in range(len(tagged_text)-1): #ENLEVER -1 SI PAS DE LIGNES VIDES DANS tag()
                    input = Input(tagged_text[element][0])
                    input.segments[0].annotations.update({
                    'tag': tagged_text[element][1],
                    'lemma': tagged_text[element][2]
                    })
                    self.inputs.append(input)


            seg = segmenter.concatenate(self.inputs)
            print seg.to_string()
            self.infoLine.setText(seg.to_string())
            self.send('Text data', seg, self)

                    #temp_list_elem = append(temp_elem_keys)
                # Depend de la facon d'affecter un element annotation
                #for element in range(len(temp_list_elem)):
                    #self.inputData = temp_list_elem[element]
                    #self.inputData = {annotation_keys: temp_list_annot[element]}
                    #return self.output

                # # separe a chaque espace ajouter les caractere "?,.!:; et autres..."
                # self.inputData_col = self.inputData.replace(" ", "\n",) # "?", ",",".","!",":",";","'") #ajout de ponctuation de Michael

                # # code pour montrer ce que ca donne et je rajoute TextInput pour apre""s (mettre label)
                # result = self.inputData_col + self.TextInput
                # self.infoLine.setText(
                #     ' %s = %s' % ( self.TextInput, result)
                # )
                # self.send('TextInput', result)

    def tag(self, inputData, language='english') :

        #On verifie que l'on a un input et un path pour treetagger:
        if self.lien_ttgg == "" :
            browse()

        #texte= avec  apres chanque mot et ponctuation \n
        #texte="Bonjour\nca\nva\n?"   #.join(inputData.data) # ATTENTION POUR LE MOMENT CA NE METS PAS LA PONCTUATION A LA LIGNE
        tmp = 'tmp_file.txt'
        f = open(tmp, 'w')
        f.write(self.inputData)
        f.close()

        commande = self.lien_ttgg + "/" + "bin/tag-" + language + ".bat"

        output = sp.Popen([commande, tmp], stdout=sp.PIPE)

        outtext, err = output.communicate()

        outtmp = outtext.split('\n')
        del(outtext)
        out = []
        for i in xrange(len(outtmp)):
            out.append(outtmp[i].split('\t'))
        return out
    
    def cacher_bouton(self,valeur):
        if valeur :
            self.infoBox3.setVisible(False)
            self.infoBox1.setDisabled(False)
        else:
            self.infoBox1.setDisabled(True)
            
            
    def updateGUI(self):
        """Update GUI state"""
        if self.displayAdvancedSettings:
            self.advancedSettings.setVisible(True)
        else:
            self.advancedSettings.setVisible(False)
            
    def advence(self):
        pass
#----------------------------------------------------------------------------------------------------------------------------------------------------------------------

if __name__=='__main__':
    myApplication = QApplication(sys.argv)
    myWidget = OWTreetagger()
    myWidget.show()
    #segmenter = Segmenter()
    myWidget.processInputData(u"How are you?")
    myApplication.exec_()
    myApplication.exec_()

    
    
"""
    
        # pour desactiver la box si pas de input !
        if :
            self.optionsBox.setVisible(True)
        else:
            self.optionsBox.setVisible(False)
"""
